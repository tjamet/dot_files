#if [ -e ${HOME}/.vimrc ]; then
#  alias gvim='gvim -S ${HOME}/.vimrc'
#else
#  echo "WARNING : disabled gvim alias as .vimrc is not found in $HOME" >&2 ;
#fi

# 2-3 functions to get the list of latest targets...

export PATH=$PATH:$HOME/.local/bin

fw_make(){
    if ! [ -d "%STATE" ]; then 
        mkdir "%STATE" ;
        > "%STATE/target"
    fi
    grep -v "^$@$" %STATE/target > %STATE/target1
    cat %STATE/target1  > %STATE/target
    echo $@            >> %STATE/target
    env make $(for i in $(seq $#); do echo -n " $1"; shift ; done) ;
}

alias make='fw_make'
alias ht='cat %STATE/target'


alias ls='ls -CF --color=tty'


alias h='history'

#
# some pretty colors to ls
#
export LS_OPTIONS='--color=auto'
eval "`dircolors`"
alias ll='ls $LS_OPTIONS -l'


#
# Some nice colors to prompt
#
reset='\[\033[00m\]'
blue='\[\033[01;34m\]'
lightblue='\[\033[01;36m\]'
green='\[\033[01;32m\]'
red='\[\033[01;31m\]'
case "$TERM" in
xterm*)
    if [ $(id -u) -eq 0 ]; then
        PS1_START="${red}\u@${hostname:-\h}${reset}: ${blue}\w${reset}"
        PS1_END=" # "
    else
        PS1_START="${green}\u@${hostname:-\h}${reset}: ${blue}\w${reset}"
        PS1_END=" \$ "
    fi
    ;;
*)
    if [ $(id -u) -eq 0 ]; then
        PS1_START='\u@${hostname:-\h}: \w'
        PS1_END=' # '
    else
        PS1_START='\u@${hostname:-\h}: \w'
        PS1_END=' \$ '
    fi
    ;;
esac

case "$TERM" in
xterm*|rxvt*)
    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${hostname:-$HOSTNAME}: ${PWD/$HOME/~}\007"'
    ;;
*)
    ;;
esac

if [ "$TERM" != "dumb" ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
fi

type gvim >/dev/null 2>&1
if [ $? -ne 0 ]; then
    #echo defaulting gvim to vim ;
    alias gvim="vim";
fi


#
# provide git completion when pressing <tab> with git command and git status in prompt
#
if [ -e ${HOME}/.git-completion.sh ]; then
  source ~/.git-completion.sh
else
  echo "WARNING : disabled git auto completion as .git-completion.sh is not found in $HOME" >&2 ;
fi
toto (){
    echo " toto "
}
if [ -e ${HOME}/.git-prompt.sh ]; then
  PS1="${PS1_START}"'$(__git_ps1   " (%s)") '"${PS1_END}"
  #PS1='$(date)'"${PS1_START}${PS1_END}"
  source ~/.git-prompt.sh
  #PS1='${green}\u@\h:\[\033[00;34m\]\w\[\033[32m\]$(__git_ps1 " (%s)")\[\033[0m\] \$ '
  export GIT_PS1_SHOWDIRTYSTATE=1
  export PS1 PATH
else
  echo "WARNING : disabled git auto completion as .git-prompt.sh is not found in $HOME" >&2 ;
fi


#
# find in base functions
#

function fbi () {
    find . -name "\.svn" -prune -o -name "%*" -prune -o -type f | xargs grep -i $1 | grep -iv matches
}

function fb () {
    find . -name "\.svn" -prune -o -name "\.git" -prune -o -name regress_final -prune -type f -o -name "%*" -prune -o -type f | grep -i $1 | grep -iv matches
}

function abspath() {                                               
    cd "$(dirname "$1")"
    printf "%s/%s\n" "$(pwd)" "$(basename "$1")"
    cd "$OLDPWD"
}
function get_sshfs_mount_point(){
    if [ $# != 1 ] ; then echo "please specify directory" >&2 ; return 1 ; fi
    readlink -f $1
}
function get_sshfs_folder(){
    CWD=$(get_sshfs_mount_point $1)
    for tpe in sshfs fuse.sshfs; do
        REMOTE=$(mount -t $tpe | awk '{print $1" "$3"* "$3}' | sed 's/:/ /' | while read HOST REMOTE LOCAL MOUNT; do
            if [[ "$CWD" == $LOCAL ]]; then
                echo $CWD | sed "s:$MOUNT:$REMOTE:";
                return 0 ;
            fi ;
        done)
        if [ $REMOTE ] ; then
            echo $REMOTE ;
            return 0 ;
        fi
    done ;
    return 1 ;
}
function get_sshfs_host(){
    CWD=$(get_sshfs_mount_point $1)
    for tpe in sshfs fuse.sshfs; do
        HOST=$(mount -t $tpe | awk '{print $1" "$3"*"}' | sed 's/:/ /' | while read HOST REMOTE LOCAL; do
            if [[ "$CWD" == $LOCAL ]]; then
                echo $HOST;
                return 0 ;
            fi
        done) ;
        if [ $HOST ] ; then
            echo $HOST ;
            return 0 ;
        fi
    done
    return 1 ;
}
function forward(){
    WD=$(pwd)
    REMOTE=$(get_sshfs_folder $WD)
    err=$?
    cmd=$1
    shift
    if [ $err -eq 0 ]; then 
        HOST=$(get_sshfs_host $WD)
        err=$?
        if [ $err -eq 0 ]; then
            if [ $REMOTE -a $HOST ]; then
                ssh -q -T -X $HOST "cd $REMOTE; set -e ; $cmd $(for i in $(seq $#) ; do echo -n " '$1'" ; shift ; done )" 2>/dev/null
                err=$?
                return $err ;
            fi
        fi
    fi
    $cmd $(for i in $(seq $#) ; do echo -n " $1" ; shift ; done )
    err=$?;
    return $err;
}
if ! [ $TJ_FINAL_HOST ] ; then
    alias make='forward make'
    alias git='forward git'
    export GIT_CMD='forward git'
fi
unset TJ_FINAL_HOST

PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ; }"'echo "$PWD $(history 1)" >> ~/.bash_eternal_history'
