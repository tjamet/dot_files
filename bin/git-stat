#!/usr/bin/env python
'''Show various statistics on git repository

Usage:
    git-stat [options] help
    git-stat [options] file list [--author=AUTHOR]
    git-stat [options] authors [--] [<files>...]

Commands:

    help            displays this message :)
    file list       list files modified by the user

Options:
    -v              increase verbosity

Arguments:
    --author=USER   apply the statistics for the given user [Default: current git author]
'''

import docopt
import json
import os
import subprocess
import sys


class JsonPopen(object):
    def __init__(self, args, **kwds):
        self.args = args
        kwds['stdout'] = subprocess.PIPE
        self.p = subprocess.Popen(args, **kwds)

    def __getattr__(self, item):
        try:
            return self.__dict__[item]
        except KeyError:
            return getattr(self.p, item)

    def get_json(self):
        return json.loads(self.get_stdout())

    def raise_for_status(self):
        self.stdout, _ = self.p.communicate()
        if self.p.wait() != 0:
            raise RuntimeError('Failed to call %s stdout:%s' % (self.args, self.get_stdout()))
        return self

    def get_stdout(self):
        return self.stdout

    @classmethod
    def GetJson(cls, *args):
        return cls(args).get_json()

    @classmethod
    def Call(cls, *args):
        return cls(args).raise_for_status()

    @classmethod
    def GetOutput(cls, *args):
        return cls(args).raise_for_status().get_stdout()

    @classmethod
    def GetLines(cls, *args):
        return cls.GetOutput(*args).splitlines(False)


class git(JsonPopen):
    def __init__(self, args, **kwds):
        super(git, self).__init__(('git',) + args, **kwds)

    @classmethod
    def Authors(cls, *args):
        return cls.GetLines('log', '--pretty=format:%cn', *args)

    @classmethod
    def Log(cls, *args):
        return cls.GetLines('log', *args)

def help(args):
    sys.stderr.write(__doc__)
    exit(1)


def get_git_config(key='.*'):
    return dict(
        [
            l.split(' ', 1)
            for l in git.GetLines('config', '--includes', '--get-regex', key)
            ]
    )

def get_latest_commiters():
    return set(git.Authors('--relative-date', '--since', '4 months ago'))

def get_git_config_value(key):
    return get_git_config(key).get(key, None)

def get_author_files(author):
    return set(git.Log('--author', author, '--name-only', '--pretty='))

def file_list(args):
    author = args['--author']
    if author == 'current git author':
        author = get_git_config_value('user.name')
    current_files = set(git.GetLines('ls-files'))
    latest_author_files = dict([
        (a, get_author_files(a))
        for a in get_latest_commiters()
        if a != author
    ])
    files = set(git.Log('--author', author, '--name-only', '--pretty='))
    files &= current_files
    for bla in latest_author_files.values():
        files -= bla
    sys.stdout.write('\n'.join(files))


if __name__ == '__main__':
    args = docopt.docopt(__doc__)
    if args['file'] and args['list']:
        f = file_list
    else:
        f = help
    exit(f(args))
